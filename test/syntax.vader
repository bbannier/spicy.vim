" This test cases and requires installation of the Vader testing
" framework, https://github.com/junegunn/vader.vim. After installing the plugin
" tests in the current buffer can be executed with `:Vader`. To execute all
" tests run e.g., `:Vader test/*`.

Given spicy (character):
  'a';
  '"';
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyCharacter"

  AssertEqual SyntaxAt(2, 1), "spicyCharacter"
  AssertEqual SyntaxAt(2, 2), "spicyCharacter"
  AssertEqual SyntaxAt(2, 3), "spicyCharacter"

Given spicy (string):
  "asd asd asd asd";
  "'";
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyString"
  AssertEqual SyntaxAt(1, 5), "spicyString"

  AssertEqual SyntaxAt(2, 1), "spicyString"
  AssertEqual SyntaxAt(2, 2), "spicyString"
  AssertEqual SyntaxAt(2, 3), "spicyString"

Given spicy (@TEST-EXEC):
  # @TEST-EXEC: foo
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 15), "spicyBTestExec"

Given spicy (@TEST-START-FILE):
  # @TEST-START-FILE foo.spicy
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 20), "spicyBTest"

Given spicy (@TEST-START-NEXT):
  # @TEST-START-NEXT
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"

Given spicy (@TEST-REQUIRES):
  # @TEST-REQUIRES: true
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 19), "shStatement"

Given spicy (@TEST-END-FILE):
  # @TEST-END-FILE
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"

Given spicy (@TEST-IGNORE):
  # @TEST-IGNORE
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"

Given spicy (@TEST-DOC):
  # @TEST-DOC: foo
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 15), "spicyBTest"

Given spicy (@TEST-GROUP):
  # @TEST-GROUP: foo
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 17), "spicyBTest"

Given spicy (@TEST-PORT):
  # @TEST-PORT: MY_PORT
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"
  AssertEqual SyntaxAt(1, 17), "spicyBTest"

Given spicy (@TEST-MEASURE-TIME):
  # @TEST-MEASURE-TIME
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"

Given spicy (@TEST-KNOWN-FAILURE):
  # @TEST-KNOWN-FAILURE
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyComment"
  AssertEqual SyntaxAt(1, 3), "spicyBTestKeyword"

Given spicy (@preproc):
  @if True
  @endif
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyPreproc"
  AssertEqual SyntaxAt(1, 7), "spicyBoolean"
  AssertEqual SyntaxAt(2, 1), "spicyPreproc"

Given spicy (escaped string):
  "\\X\\" 1;
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyString"
  AssertEqual SyntaxAt(1, 7), "spicyString"
  AssertEqual SyntaxAt(1, 8), ""
  AssertEqual SyntaxAt(1, 9), "spicyNumber"

Given spicy (escaped quote):
  "\\X\"" 1;
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyString"
  AssertEqual SyntaxAt(1, 7), "spicyString"
  AssertEqual SyntaxAt(1, 8), ""
  AssertEqual SyntaxAt(1, 9), "spicyNumber"

Given spicy (hook with args):
  on %error(e: string) {}
Execute:
# on
  AssertEqual SyntaxAt(1, 1), "spicyKeyword"
# %error
  AssertEqual SyntaxAt(1, 4), "spicyProperty"
  AssertEqual SyntaxAt(1, 5), "spicyProperty"
# e
  AssertEqual SyntaxAt(1, 11), "spicyIdentifier"
# string
  AssertEqual SyntaxAt(1, 14), "spicyType"

Given spicy (capture):
  $1
  $10
  $99
Execute:
  AssertEqual SyntaxAt(1, 1), "spicyCapture"
  AssertEqual SyntaxAt(1, 2), "spicyCapture"

  AssertEqual SyntaxAt(2, 1), "spicyCapture"
  AssertEqual SyntaxAt(2, 2), "spicyCapture"

  AssertEqual SyntaxAt(3, 1), "spicyCapture"
  AssertEqual SyntaxAt(3, 2), "spicyCapture"

Given spicy (impossible capture):
  $0
Execute:
  " Does not match.
  AssertEqual SyntaxAt(1, 1), ""
  AssertEqual SyntaxAt(1, 2), "spicyNumber"

Given spicy (struct init):
  local s: S = [$abc123 = 1];
Execute:
  AssertEqual SyntaxAt(1, 14), ""
  AssertEqual SyntaxAt(1, 15), "spicyStructInit"
  AssertEqual SyntaxAt(1, 16), "spicyStructInit"
  AssertEqual SyntaxAt(1, 21), "spicyStructInit"
  AssertEqual SyntaxAt(1, 22), ""
